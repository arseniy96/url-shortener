// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/arseniy96/url-shortener/internal/storage (interfaces: DatabaseInterface)

// Package storage is a generated GoMock package.
package storage

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabaseInterface is a mock of DatabaseInterface interface.
type MockDatabaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseInterfaceMockRecorder
}

// MockDatabaseInterfaceMockRecorder is the mock recorder for MockDatabaseInterface.
type MockDatabaseInterfaceMockRecorder struct {
	mock *MockDatabaseInterface
}

// NewMockDatabaseInterface creates a new mock instance.
func NewMockDatabaseInterface(ctrl *gomock.Controller) *MockDatabaseInterface {
	mock := &MockDatabaseInterface{ctrl: ctrl}
	mock.recorder = &MockDatabaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseInterface) EXPECT() *MockDatabaseInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDatabaseInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDatabaseInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatabaseInterface)(nil).Close))
}

// FindRecord mocks base method.
func (m *MockDatabaseInterface) FindRecord(arg0 context.Context, arg1 string) (Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRecord", arg0, arg1)
	ret0, _ := ret[0].(Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRecord indicates an expected call of FindRecord.
func (mr *MockDatabaseInterfaceMockRecorder) FindRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRecord", reflect.TypeOf((*MockDatabaseInterface)(nil).FindRecord), arg0, arg1)
}

// HealthCheck mocks base method.
func (m *MockDatabaseInterface) HealthCheck() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck")
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockDatabaseInterfaceMockRecorder) HealthCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockDatabaseInterface)(nil).HealthCheck))
}

// Restore mocks base method.
func (m *MockDatabaseInterface) Restore(arg0 []Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restore indicates an expected call of Restore.
func (mr *MockDatabaseInterfaceMockRecorder) Restore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockDatabaseInterface)(nil).Restore), arg0)
}

// SaveRecord mocks base method.
func (m *MockDatabaseInterface) SaveRecord(arg0 context.Context, arg1 *Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRecord", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRecord indicates an expected call of SaveRecord.
func (mr *MockDatabaseInterfaceMockRecorder) SaveRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRecord", reflect.TypeOf((*MockDatabaseInterface)(nil).SaveRecord), arg0, arg1)
}
